; glossStyle.ini
; A style for the gloss package. 
; Gloss is a package for using BibTeX to create a Glossary.

; -------------------------
; parsed by: InitBIB.init()
; used by:   ParserBIB + gui etc.
; -------------------------------------------------------------------------------
; This file contains data about entries and what fields are required and optional.
; Based on the standard BibTeX styles (plain, sorted etc.) 
; + a few popular nonstandard fields (url, isbn, etc) but those are all "ignored fields"
; -------------------------------------------------------------------------------
; SYNTAX:
; the [Special],[Fields] and [EntryTypes]  headings must occurr in this order.
; a line starting with semicolon (';') is a comment, comments cannot start on end of a line
; 
; DO NOT EDIT this file unless you know what your'e doing.
;
; NEW! Added [Special] to make it more dynamic: (Stein)
[Special]
; Types: 
; a = abbrevevation (keep or expand it) (saved after "keep it")
; k = keep it   (saved in the order they occurred before abbrev's)
; i = ignore it (read through and don't save)
string   = a
preamble = k
comment  = k
[End Special]

;bibitcomment: Used to avoid duplicating comments when repeated opening/saving of file.
;bibitcomment = i
[Fields]
; The order the fields are listed are somewhat important:
; it determines the order of fields in preview and the initial order in the list.
; 
; Types:
; <nothing> 	: parse as regular text
; #name 	: parse as list of names (as @author and @editor in standard BibTeX)
; #title	: parse as title (currently just as plain text because 
;				  the special rules here doesn't matter for Bib-it
; #crossref	: parse as text, the value should be a BibTeX key of a parent entry
; #month	: parse as month (expect 3 letter abbrevs) Stored as: text + month number
; #year		: parse as year (expect 3 letter abbrevs)  Stored as: text + integer
; #large	: parse as text, use if field often is large (for preview styling)
; #<anything else> : will be ignored (unless you change the program of course)

;the word
f = word
;the definition
f = definition		#large

; a short form of the word (acronym / letter etc.)
f = short
; a sort key (useful for words with non English letters)
f = sort-word
; the group to sort it under (fx. 'A') 
f = group
; force word to be listed under this heading (incompatible with group)
f = heading

; Default (works but is unusual)
f = crossref		#crossref
[End Fields]

[Dupsearch]
;Discriminator = crossref
df = word
df = definition

[End Dupsearch]

[EntryTypes]
; The # is important!!
; any undefined fieldname will be ignored.
; if any field lacks any required (or lack any optional) fields
; use "<none>" for consistency and easy reading (see: misc)
; 
;[spelling]	= [required fields] # [optional fields]
;(We've ignored the "this or that" problem. In this file the required fields that are
; either one or the other are both set as required)
gd 		= word,definition # short,sort-word,group,heading
glossdef 	= word,definition # short,sort-word,group,heading
[End EntryTypes]

